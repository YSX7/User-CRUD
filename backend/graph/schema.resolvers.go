package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"errors"
	"log"
	"net/http"

	"vuegolang/dbmodels"
	"vuegolang/graph/model"
	"vuegolang/pkg/authpayload"
	"vuegolang/pkg/sessions"
	"vuegolang/pkg/token"

	"github.com/uptrace/bun"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"golang.org/x/crypto/bcrypt"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, login string, password string) (*model.AuthPayload, error) {
	dbUser := dbmodels.User{}

	errScan := r.Db.NewSelect().Model(&dbUser).Scan(ctx)

	if errScan != nil {
		log.Println(errScan.Error())
		if dbUser == (dbmodels.User{}) {
			return nil, errors.New(wrongCredentials)
		}
		return nil, errScan
	}

	errHash := bcrypt.CompareHashAndPassword([]byte(dbUser.Password), []byte(password))
	if errHash != nil {
		log.Println(errHash)
		return nil, errors.New(wrongCredentials)
	}

	// Генерируем токен
	token, errToken := token.New(dbUser.ID)
	if errToken != nil {
		return nil, errToken
	}

	cookieValue, errToken := token.ToJsonString()
	r.Sessions.Add(
		cookieValue, &sessions.Session{
			Id:         dbUser.ID,
			PrivateKey: token.PrivateKey,
			Login:      dbUser.Login,
			Role:       model.Role(dbUser.Role),
		},
	)
	if errToken != nil {
		log.Printf("token stringify error: %v", errToken)
		return nil, errors.New("internal error")
	}

	authInfo := &model.AuthInfo{Token: cookieValue}

	// Создадим cookie
	cookie := &http.Cookie{
		Name:     "_auth",
		Value:    cookieValue,
		Expires:  token.Expired,
		Path:     "/",
		SameSite: http.SameSiteLaxMode,
	}
	s := authpayload.FromContext(ctx)
	// Установим cookie
	http.SetCookie(s.ResponseWriter, cookie)

	return &model.AuthPayload{
		User: &model.User{ID: dbUser.ID, Login: dbUser.Login, Role: model.Role(dbUser.Role)},
		Info: authInfo,
	}, nil
}

// Validate is the resolver for the validate field.
func (r *mutationResolver) Validate(ctx context.Context) (*model.User, error) {
	var errDefault = &gqlerror.Error{Message: "Нет сессии"}
	sessionKey, errToken := authpayload.GetSessionKeyFromContext(ctx)
	if errToken != nil {
		return nil, errDefault
	}
	data, ok := r.Sessions.Get(sessionKey)
	if !ok {
		return nil, errDefault
	}
	return &model.User{ID: data.Id, Login: data.Login, Role: data.Role}, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context, login string) (*string, error) {
	var okMsg = "Ok"
	sessionKey, errToken := authpayload.GetSessionKeyFromContext(ctx)
	if errToken != nil {
		log.Println("Get Token From Context error: ", errToken)
		return nil, &gqlerror.Error{Message: "ошибка получения токена, пожалуйста, перелогиньтесь"}
	}
	r.Sessions.Remove(sessionKey)
	return &okMsg, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context, login string) (*model.User, error) {
	dbUser := model.User{}
	errScan := r.Db.NewSelect().Model(&dbUser).Where("? = ?", bun.Ident("login"), login).Scan(ctx)
	if errScan != nil {
		log.Println(errScan)
		return nil, &gqlerror.Error{Message: "internal error"}
	}
	return &dbUser, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	dbUsers := []*model.User{}
	query := r.Db.NewSelect().Model(&dbUsers)

	errScan := query.Scan(ctx)
	if errScan != nil {
		log.Println(errScan)
		return nil, &gqlerror.Error{Message: "internal error"}
	}
	return dbUsers, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
