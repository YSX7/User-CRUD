package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"

	"github.com/uptrace/bun"
	"golang.org/x/crypto/bcrypt"
	"vuegolang/graph/model"
	"vuegolang/models"
	"vuegolang/pkg/ctxpayload"
	"vuegolang/pkg/token"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(
	ctx context.Context,
	obj *model.AuthOps,
	login string,
	password string,
) (*model.AuthPayload, error) {
	dbUser := models.User{}
	errScan := r.Db.NewSelect().Model(&dbUser).Where("? = ?", bun.Ident("login"), login).Scan(ctx)
	if errScan != nil {
		log.Println(errScan.Error())
		if dbUser == (models.User{}) {
			return nil, errors.New(wrongCredentials)
		}
		return nil, errScan
	}

	errHash := bcrypt.CompareHashAndPassword([]byte(dbUser.Password), []byte(password))
	if errHash != nil {
		log.Println(errHash)
		return nil, errors.New(wrongCredentials)
	}

	// Генерируем токен
	token, errToken := token.New(dbUser.ID)
	if errToken != nil {
		return nil, errToken
	}

	cookieValue, errToken := token.ToJsonString()
	r.Sessions[cookieValue] = Session{PrivateKey: token.PrivateKey}
	if errToken != nil {
		log.Printf("token stringify error: %v", errToken)
		return nil, errors.New("internal error")
	}

	authInfo := &model.AuthInfo{Token: &cookieValue}

	// Создадим cookie
	cookie := &http.Cookie{
		Name:     "_auth",
		Value:    cookieValue,
		Expires:  token.Expired,
		Path:     "/",
		SameSite: http.SameSiteLaxMode,
	}
	s := ctxpayload.FromContext(ctx)
	// Установим cookie
	http.SetCookie(s.ResponseWriter, cookie)

	return &model.AuthPayload{
		User: &model.User{ID: fmt.Sprint(dbUser.ID), Login: dbUser.Login},
		Info: authInfo,
	}, nil
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context, login string) (*model.User, error) {
	dbUser := model.User{}
	errScan := r.Db.NewSelect().Model(&dbUser).Where("? = ?", bun.Ident("login"), login).Scan(ctx)
	if errScan != nil {
		return nil, errScan
	}
	return &dbUser, nil
}

// AuthOps returns AuthOpsResolver implementation.
func (r *Resolver) AuthOps() AuthOpsResolver { return &authOpsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
